(*
public class Point {
   int x;
   int y;
}

public void reflect(Point p) {
   int temp = p.x;
   int temp2 = p.y;
   p.x = temp2;
   p.y = temp;
}

public static void main(String[] args) {
   Point one = new Point(); // allocation site 0
   one.x = 1; // 
   one.y = 6;
   
   Point two = new Point(); // allocation site 1
   two.x = 4; 
   two.y = 7;
   
   Point three = new Point(); // allocation site 2
   three.x = 2;
   three.y = 1;

   reflect(one); // invocation site 0
   reflect(two); // invocation site 1
}
*)


(* variable name *)
type var = string

(* allocation site, i.e., source location *)
type heap = bv[32]

(* method names *)
type method = string

(* field names *)
type field = string

(* method signatures *)
type sig = string

(* method invocations/callsites *)
type invocation = bv[32]

(* argument index *)
type arg = bv[32]


(* edb rules *)
@external
input alloc(var, heap, method).

@external
(* not necessary *)
input move(var, var).

@external
(* not necessary *)
input load(var, var, field).

@external
(* not necessary *)
input store(var, field, var).

@external
input vcall(var, sig, invocation, method).

@external
input formal_arg(meth, arg, var).

@external
input formal_return(method, var).

@external
input actual_arg(invocation, var).

@external
input actual_return(invocation, var).

@external
static_call(invocation, method).

@external
input entry_point(method).

@external
input in_method(invocation, method).


(* idb rules *)
output var_points_to(var, heap).

output call_graph(invocation, meth).

output field_points_to(heap, field, heap).

output interproc_assign(var, var).

output reachable(method).

call_graph(I, M) :- static_call(I, M).

reachable(M) :- entry_point(M).
reachable(M) :-
  reachable(N),
  in_method(I, N),
  call_graph(I, M).

(* V = new H *)
var_points_to(V, H) :-
  reachable(M),
  alloc(V, H, M).

(* Vto = Vfrom *)
var_points_to(Vto, H) :-
  move(Vto, Vfrom),
  var_points_to(Vfrom, H).

(* Vbase.F = Vfrom *)
field_points_to(Hbase, F, H) :-
  store(Vbase, F, Vfrom),
  var_points_to(Vfrom, H),
  var_points_to(Vbase, Hbase).

(* Vto = Vbase.F *)
var_points_to(Vto, H) :-
  load(Vto, Vbase, F),
  var_points_to(Vbase, Hbase),
  field_points_to(Hbase, F, H).

(* M(... Vfrom ... ) *)
interproc_assign(Vto, Vfrom) :-
  call_graph(I, M),
  formal_arg(M, N, Vto),
  actual_arg(I, N, Vfrom).

(* Vto = M(...) *)
interproc_assign(Vto, Vfrom) :-
  call_graph(I, M),
  formal_return(M, Vfrom),
  actual_return(I, Vto).